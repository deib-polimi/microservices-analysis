{
    "discos": [],
    "gates": [],
    "num_dockers": 1,
    "dbs": [],
    "images": [
        "ruby"
    ],
    "num_gates": 0,
    "num_langs": 2,
    "files": [],
    "num_discos": 0,
    "num_dbs": 0,
    "langs": [
        "ruby",
        "dockerfile"
    ],
    "monitors": [],
    "languages": [
        "ruby",
        "dockerfile"
    ],
    "avg_size_service": 2.0,
    "name": "suprjinx/mock_service",
    "size": 2,
    "num_servers": 0,
    "url": "git://github.com/suprjinx/mock_service.git",
    "num_monitors": 0,
    "buses": [],
    "servers": [],
    "num_buses": 0,
    "num_files": 2,
    "structure": {
        "services": [
            {
                "servers": [],
                "discos": [],
                "gates": [],
                "image": "mock_service",
                "image_full": "mock_service",
                "dbs": [],
                "depends_on": [],
                "name": "microservice",
                "monitors": [],
                "buses": []
            }
        ],
        "path": "/docker-compose.yml",
        "detected_dbs": {
            "services": [],
            "num": 0,
            "names": [],
            "shared_dbs": false
        },
        "num_services": 1
    },
    "dockers": [
        {
            "cmd": "bundle install --local && bundle exec rackup",
            "discos": [],
            "monitors": [],
            "dbs": [],
            "gates": [],
            "keywords": [
                "apt",
                "var",
                "get",
                "lib",
                "essential"
            ],
            "servers": [],
            "path": "/Dockerfile",
            "from_full": "ruby:2.5.0",
            "langs": [
                "ruby"
            ],
            "cmd_keywords": [
                "bundle",
                "local",
                "exec",
                "rackup",
                "install"
            ],
            "buses": [],
            "from": "ruby"
        }
    ],
    "num_services": 1,
    "shared_dbs": false
}