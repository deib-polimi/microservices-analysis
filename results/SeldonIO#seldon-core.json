{
    "url": "git://github.com/SeldonIO/seldon-core.git",
    "name": "SeldonIO/seldon-core",
    "commiters": 170,
    "size": 112378,
    "languages": [
        "python",
        "jupyter notebook",
        "go",
        "c++",
        "html"
    ],
    "dockers": [
        {
            "path": "/executor/samples/local/metadata/Dockerfile",
            "cmd": "seldon-core-microservice $MODEL_NAME $API_TYPE --service-type $SERVICE_TYPE --persistence $PERSISTENCE --log-level DEBUG",
            "cmd_keywords": [
                "type",
                "service",
                "persistence",
                "seldon",
                "core"
            ],
            "from": "seldonio/seldon-core-s2i-python37",
            "from_full": "seldonio/seldon-core-s2i-python37:1.2.1-dev",
            "keywords": [],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/alibi-explain-server/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "base",
            "keywords": [
                "licenses",
                "python",
                "pip",
                "install",
                "poetry"
            ],
            "from_full": "base",
            "dbs": [],
            "servers": [
                "httpd"
            ],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/seldon-request-logger/Dockerfile",
            "cmd": "gunicorn --bind 0.0.0.0:$PORT --workers $GUNICORN_WORKERS --threads $GUNICORN_THREADS default_logger:app",
            "cmd_keywords": [
                "gunicorn",
                "workers",
                "threads",
                "bind",
                "port"
            ],
            "from": "registry.access.redhat.com/ubi8/python-38",
            "from_full": "registry.access.redhat.com/ubi8/python-38",
            "keywords": [
                "licenses",
                "pip",
                "license",
                "install",
                "file"
            ],
            "dbs": [],
            "servers": [
                "httpd"
            ],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/storage-initializer/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "registry.access.redhat.com/ubi8/python-36",
            "from_full": "registry.access.redhat.com/ubi8/python-36",
            "keywords": [
                "licenses",
                "pip",
                "license",
                "install",
                "file"
            ],
            "dbs": [],
            "servers": [
                "httpd"
            ],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/rclone-storage-initializer/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "rclone/rclone",
            "from_full": "rclone/rclone:1.56.2",
            "keywords": [],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/alibi-detect-server/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "base",
            "keywords": [
                "rclone",
                "licenses",
                "install",
                "linux",
                "amd"
            ],
            "from_full": "base",
            "dbs": [],
            "servers": [
                "httpd"
            ],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/kubectl-proxy/Dockerfile",
            "cmd": "/usr/local/bin/kubectl proxy -p 8001",
            "cmd_keywords": [
                "usr",
                "local",
                "bin",
                "kubectl",
                "proxy"
            ],
            "from": "alpine",
            "from_full": "alpine",
            "keywords": [
                "apk",
                "kubectl",
                "bin",
                "add",
                "update"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/util/loadtester/Dockerfile",
            "cmd": "bash",
            "cmd_keywords": [
                "bash"
            ],
            "from": "ubuntu",
            "from_full": "ubuntu:16.04",
            "keywords": [
                "python",
                "install",
                "apt",
                "get",
                "dev"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "bash"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/nodejs/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "node",
            "from_full": "node:latest",
            "keywords": [
                "mkdir",
                "microservice",
                "npm",
                "install"
            ],
            "dbs": [],
            "servers": [
                "node"
            ],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/R/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "rocker/r-base",
            "from_full": "rocker/r-base",
            "keywords": [
                "install",
                "rscript",
                "packages",
                "dev",
                "apt"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/go/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "golang",
            "from_full": "golang",
            "keywords": [
                "get",
                "google",
                "golang",
                "org",
                "grpc"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "golang"
            ],
            "gates": [],
            "monitors": [],
            "discos": [
                "grpc"
            ]
        },
        {
            "path": "/incubating/wrappers/s2i/python-ngraph-onnx/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "seldonio/seldon-core-s2i-python3",
            "from_full": "seldonio/seldon-core-s2i-python3:0.4",
            "keywords": [
                "ngraph",
                "git",
                "install",
                "build",
                "apt"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/python-tensorrt/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "seldonio/seldon-core-s2i-python3",
            "from_full": "seldonio/seldon-core-s2i-python3:0.2",
            "keywords": [
                "inference",
                "server",
                "install",
                "build",
                "dev"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/cpp/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "$BASE_IMAGE_NAME",
            "keywords": [
                "build",
                "make",
                "install",
                "cpp",
                "pybind"
            ],
            "from_full": "$BASE_IMAGE_NAME:$BASE_IMAGE_TAG",
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "cmake"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/kafka/Dockerfile",
            "cmd": "start-kafka.sh",
            "cmd_keywords": [
                "start",
                "kafka"
            ],
            "from": "anapsix/alpine-java",
            "from_full": "anapsix/alpine-java",
            "keywords": [
                "kafka",
                "version",
                "tmp",
                "chmod",
                "scala"
            ],
            "dbs": [],
            "servers": [],
            "buses": [
                "kafka"
            ],
            "langs": [
                "java"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/engine/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "openjdk",
            "from_full": "openjdk:11.0.5-jre-slim",
            "keywords": [
                "mvn",
                "clean",
                "verify",
                "dlicense",
                "usemissingfile"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/operator/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "gcr.io/distroless/base-debian10",
            "from_full": "gcr.io/distroless/base-debian10:latest",
            "keywords": [
                "tar",
                "hashicorp",
                "wget",
                "https",
                "github"
            ],
            "dbs": [
                "sql"
            ],
            "servers": [],
            "buses": [],
            "langs": [
                "sql"
            ],
            "gates": [],
            "monitors": [],
            "discos": [
                "consul"
            ]
        },
        {
            "path": "/core-builder/Dockerfile",
            "cmd": "bash",
            "cmd_keywords": [
                "bash"
            ],
            "from": "openjdk",
            "from_full": "openjdk:13.0.1-jdk-buster",
            "keywords": [
                "tar",
                "linux",
                "apt",
                "get",
                "com"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "bash"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/outliers/alibi-detect-combiner/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "seldonio/seldon-core-s2i-python37",
            "from_full": "seldonio/seldon-core-s2i-python37:0.14",
            "keywords": [
                "pip",
                "install",
                "upgrade",
                "setuptools",
                "requirements"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/pachyderm-simple/iris-train-python-svm/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "python",
            "from_full": "python:3.8-slim",
            "keywords": [
                "pip",
                "install",
                "pandas",
                "scikit",
                "learn"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/init_containers/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "rclone/rclone",
            "from_full": "rclone/rclone:latest",
            "keywords": [],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/batch/hdfs-argo-workflows/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "python",
            "from_full": "python:3.8",
            "keywords": [
                "pip",
                "install",
                "hdfs"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/sklearn_spacy_text/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "seldonio/seldon-core-s2i-python37-ubi8",
            "from_full": "seldonio/seldon-core-s2i-python37-ubi8:1.7.0-dev",
            "keywords": [
                "spacy",
                "pip",
                "install",
                "python",
                "download"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/ray/batch-split-proxy/Dockerfile",
            "cmd": "seldon-core-microservice $MODEL_NAME $API_TYPE",
            "cmd_keywords": [
                "seldon",
                "core",
                "microservice",
                "model",
                "name"
            ],
            "from": "seldonio/seldon-core-s2i-python37",
            "from_full": "seldonio/seldon-core-s2i-python37:1.5.0-dev",
            "keywords": [
                "pip",
                "install",
                "cache",
                "requirements",
                "txt"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kubeflow/pipeline/pipeline_steps/data_downloader/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "python",
            "from_full": "python:3.7-slim",
            "keywords": [
                "pip",
                "install",
                "requirements",
                "txt"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/pachyderm-cd4ml/RSIDeployer/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "alpine/helm",
            "from_full": "alpine/helm:3.4.2",
            "keywords": [],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/pachyderm-cd4ml/RSIServing/Dockerfile",
            "cmd": "exec seldon-core-microservice RSIModel --service-type MODEL --persistence 0",
            "cmd_keywords": [
                "exec",
                "seldon",
                "core",
                "microservice",
                "rsimodel"
            ],
            "from": "python",
            "from_full": "python:3.8-slim",
            "keywords": [
                "pip",
                "install",
                "pandas",
                "statsmodels",
                "seldon"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/pachyderm-cd4ml/RSITraining/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "python",
            "from_full": "python:3.8-slim",
            "keywords": [
                "pip",
                "install",
                "pandas",
                "statsmodels",
                "joblib"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/wrappers/s2i/python/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "$BASE_IMAGE",
            "keywords": [
                "conda",
                "python",
                "certifi",
                "install",
                "pip"
            ],
            "from_full": "$BASE_IMAGE:$IMAGE_VERSION",
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "python"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/zookeeper-k8s/Dockerfile",
            "cmd": "/opt/zookeeper/bin/config-and-run.sh",
            "cmd_keywords": [
                "opt",
                "zookeeper",
                "bin",
                "config",
                "and"
            ],
            "from": "ubuntu",
            "from_full": "ubuntu:14.04",
            "keywords": [
                "zookeeper",
                "opt",
                "apt",
                "get",
                "version"
            ],
            "dbs": [
                "zookeeper"
            ],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": [
                "zookeeper"
            ]
        },
        {
            "path": "/testing/profiling/engine/Dockerfile",
            "cmd": "",
            "cmd_keywords": [],
            "from": "$SELDON_ENGINE_IMAGE",
            "keywords": [
                "yourkit",
                "docker",
                "javaprofiler",
                "zip",
                "tmp"
            ],
            "from_full": "$SELDON_ENGINE_IMAGE",
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/testing/benchmarking/ghz/Dockerfile",
            "cmd": "ghz --help",
            "cmd_keywords": [
                "ghz",
                "help"
            ],
            "from": "ubuntu",
            "from_full": "ubuntu",
            "keywords": [
                "ghz",
                "https",
                "github",
                "com",
                "apt"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/python-builder/Dockerfile",
            "cmd": "bash",
            "cmd_keywords": [
                "bash"
            ],
            "from": "continuumio/miniconda3",
            "from_full": "continuumio/miniconda3:4.7.12",
            "keywords": [
                "install",
                "apt",
                "get",
                "git",
                "pip"
            ],
            "dbs": [],
            "servers": [],
            "buses": [],
            "langs": [
                "bash"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        }
    ],
    "structure": {
        "path": "/executor/samples/local/metadata/docker-compose.yml",
        "num_services": 6,
        "services": [
            {
                "name": "default",
                "image": ".",
                "image_full": ".",
                "dbs": [],
                "servers": [],
                "buses": [],
                "gates": [],
                "monitors": [],
                "discos": [],
                "depends_on": []
            },
            {
                "name": "model_1",
                "image": ".",
                "image_full": ".",
                "dbs": [],
                "servers": [],
                "buses": [],
                "gates": [],
                "monitors": [],
                "discos": [],
                "depends_on": []
            },
            {
                "name": "model_2",
                "image": ".",
                "image_full": ".",
                "dbs": [],
                "servers": [],
                "buses": [],
                "gates": [],
                "monitors": [],
                "discos": [],
                "depends_on": []
            },
            {
                "name": "model_combiner",
                "image": ".",
                "image_full": ".",
                "dbs": [],
                "servers": [],
                "buses": [],
                "gates": [],
                "monitors": [],
                "discos": [],
                "depends_on": []
            },
            {
                "name": "model_a1",
                "image": ".",
                "image_full": ".",
                "dbs": [],
                "servers": [],
                "buses": [],
                "gates": [],
                "monitors": [],
                "discos": [],
                "depends_on": []
            },
            {
                "name": "model_a2",
                "image": ".",
                "image_full": ".",
                "dbs": [],
                "servers": [],
                "buses": [],
                "gates": [],
                "monitors": [],
                "discos": [],
                "depends_on": []
            }
        ],
        "detected_dbs": {
            "num": 0,
            "names": [],
            "services": [],
            "shared_dbs": false
        },
        "dep_graph_full": {
            "nodes": 6,
            "edges": 0,
            "avg_deps_per_service": 0.0,
            "acyclic": true,
            "longest_path": 0
        },
        "dep_graph_micro": {
            "nodes": 6,
            "edges": 0,
            "avg_deps_per_service": 0.0,
            "acyclic": true,
            "longest_path": 0
        }
    },
    "files": [
        {
            "path": "/servers/tfserving_proxy/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/servers/mlflowserver/mlflowserver/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/servers/mlflowserver/models/elasticnet_wine/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/servers/xgboostserver/xgboostserver/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/servers/sklearnserver/models/iris/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/servers/sklearnserver/models/moviesentiment/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/servers/sklearnserver/sklearnserver/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/seldon-request-logger/requirements.txt",
            "dbs": [],
            "servers": [
                "flask"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/routers/case_study/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/routers/case_study/models/rf_model/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/routers/case_study/models/xgb_model/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/routers/epsilon-greedy/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/components/routers/thompson-sampling/requirements.txt",
            "dbs": [
                "redis"
            ],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/integrations/sagemaker/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/util/loadtester/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/util/kafka/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [
                "kafka"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/java-jni/java-jni/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/doc/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/feedback/reward-accuracy/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/cicd/sig-mlops-seldon-jenkins-x/src/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/cicd/sig-mlops-jenkins-classic/servers/torchserver/torchserver/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/cicd/sig-mlops-jenkins-classic/models/news_classifier/src/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/cicd/sig-mlops-jenkins-classic/models/image_classifier/src/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kafka/cifar10/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [
                "kafka"
            ],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/tensorrt/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/resnet/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/sklearn_iris/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/sklearn_spacy_text/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/azure_aks_deep_mnist/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/aws_eks_deep_mnist/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/sklearn_iris_customdata/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/lightgbm_custom_server/lightgbmserver/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/h2o_example/requirements.txt",
            "dbs": [
                "redis"
            ],
            "servers": [
                "flask"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": [
                "grpc"
            ]
        },
        {
            "path": "/examples/models/gpu_tensorflow_deep_mnist/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/mean_classifier/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/sklearn_iris_jsondata/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/alibaba_ack_deep_mnist/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/chainer_mnist/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/keras_cifar10/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/statsmodels/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/templates/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/testing/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/openvino_imagenet_ensemble/resources/model/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/models/openvino_imagenet_ensemble/resources/transformer/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/output_transformers/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/ray/batch-split-proxy/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/ray/batch-split-proxy/training/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/explainers/imagenet/resources/transformer/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/dvc/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kubeflow/pipeline/pipeline_steps/tfidf_vectorizer/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kubeflow/pipeline/pipeline_steps/spacy_tokenize/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kubeflow/pipeline/pipeline_steps/data_downloader/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kubeflow/pipeline/pipeline_steps/clean_text/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/kubeflow/pipeline/pipeline_steps/lr_text_classifier/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/transformers/v2-protocol/tokeniser/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/examples/transformers/mean_transformer/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/wrappers/s2i/python/test_fbs/requirements.txt",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/java-jni/test/model-template-app/pom.xml",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/java/test/model-template-app/pom.xml",
            "dbs": [],
            "servers": [
                "spring"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": [
                "grpc"
            ]
        },
        {
            "path": "/incubating/wrappers/java/pom.xml",
            "dbs": [
                "nexus"
            ],
            "servers": [
                "spring",
                "tomcat"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": [
                "grpc"
            ]
        },
        {
            "path": "/engine/pom.xml",
            "dbs": [],
            "servers": [
                "spring"
            ],
            "buses": [],
            "gates": [],
            "monitors": [
                "jaeger",
                "prometheus"
            ],
            "discos": [
                "thrift",
                "grpc"
            ]
        },
        {
            "path": "/examples/models/h2o_mojo/pom.xml",
            "dbs": [],
            "servers": [
                "spring"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": [
                "grpc"
            ]
        },
        {
            "path": "/testing/s2i/java/pom.xml",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/examples/nodejs_tensorflow/package.json",
            "dbs": [],
            "servers": [
                "node"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/examples/nodejs_mnist/package.json",
            "dbs": [],
            "servers": [
                "node"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/nodejs/package.json",
            "dbs": [],
            "servers": [
                "express"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": [
                "grpc"
            ]
        },
        {
            "path": "/incubating/wrappers/s2i/nodejs/test/transformer-template-app/package.json",
            "dbs": [],
            "servers": [],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        },
        {
            "path": "/incubating/wrappers/s2i/nodejs/test/model-template-app/package.json",
            "dbs": [],
            "servers": [
                "node"
            ],
            "buses": [],
            "gates": [],
            "monitors": [],
            "discos": []
        }
    ],
    "dbs": [
        "nexus",
        "sql",
        "redis",
        "zookeeper"
    ],
    "servers": [
        "spring",
        "tomcat",
        "flask",
        "express",
        "node",
        "httpd"
    ],
    "buses": [
        "kafka"
    ],
    "langs": [
        "jupyter notebook",
        "html",
        "java",
        "c++",
        "cmake",
        "golang",
        "go",
        "bash",
        "sql",
        "python"
    ],
    "gates": [],
    "monitors": [
        "jaeger",
        "prometheus"
    ],
    "discos": [
        "consul",
        "thrift",
        "grpc",
        "zookeeper"
    ],
    "num_services": 6,
    "shared_dbs": false,
    "num_dockers": 33,
    "images": [
        "openjdk",
        "seldonio/seldon-core-s2i-python37",
        "seldonio/seldon-core-s2i-python3",
        "golang",
        "$BASE_IMAGE",
        "ubuntu",
        "base",
        "alpine/helm",
        "anapsix/alpine-java",
        "gcr.io/distroless/base-debian10",
        "rclone/rclone",
        "registry.access.redhat.com/ubi8/python-36",
        "continuumio/miniconda3",
        "rocker/r-base",
        "registry.access.redhat.com/ubi8/python-38",
        "seldonio/seldon-core-s2i-python37-ubi8",
        "alpine",
        "$BASE_IMAGE_NAME",
        "$SELDON_ENGINE_IMAGE",
        "node",
        "python"
    ],
    "num_dbs": 4,
    "num_servers": 6,
    "num_buses": 1,
    "num_langs": 10,
    "num_gates": 0,
    "num_monitors": 2,
    "num_discos": 4,
    "num_files": 102,
    "avg_size_service": 3405.3939393939395
}